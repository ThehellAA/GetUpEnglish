package com.getupenglish.dao;

import static com.getupenglish.dao.DAOUtility.close;
import static com.getupenglish.dao.DAOUtility.initPreparedQuery;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;

import com.getupenglish.beans.Utilisateur;

public class UtilisateurDaoImp implements UtilisateurDao {
    private static final String SQL_SELECT       = "SELECT email, nom, prenom, motDePasse, age, telephone, dateInscription, isAdmin FROM Utilisateur ORDER BY dateInscription";
    private static final String SQL_SELECT_EMAIL = "SELECT email, nom, prenom, motDePasse, age, telephone, dateInscription, isAdmin"
            + " FROM Utilisateur WHERE email = ?";
    private static final String SQL_INSERT       = "INSERT INTO Utilisateur (email, nom, prenom, motDePasse, age, telephone, dateInscription)"
            + " VALUES (?, ?, ?, ?, ?, ?, ?)";
    private static final String SQL_DELETE_EMAIL = "DELETE FROM Utilisateur WHERE email = ?";
    private static final String SQL_UPDATE       = "UPDATE Utilisateur SET nom = ?, prenom = ?, age = ?, telephone = ? WHERE email = ?";

    private DAOFactory          daoFactory;

    UtilisateurDaoImp( DAOFactory daoFactory ) {
        this.daoFactory = daoFactory;
    }

    @Override
    public void create( Utilisateur utilisateur ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValue = null;
        Long idPanier = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_INSERT, false, utilisateur.getEmail(),
                    utilisateur.getNom(), utilisateur.getPrenom(),
                    utilisateur.getMotDePasse(), utilisateur.getAge(), utilisateur.getTelephone(),
                    new Timestamp( utilisateur.getDateInscription().getMillis() ) );
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la création d'utilisateur, aucune ligne ajoutée dans la table." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( autoGeneratedValue, preparedStatement, connection );
        }
    }

    @Override
    public Utilisateur read( String email ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet rs = null;
        Utilisateur utilisateur = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_SELECT_EMAIL, false, email );

            rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
                utilisateur = map( rs );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( rs, preparedStatement, connection );
        }

        return utilisateur;
    }

    @Override
    public void delete( String email ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValue = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_DELETE_EMAIL, false, email );

            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la suppression d'utilisateur, aucune ligne supprimée de la table." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( autoGeneratedValue, preparedStatement, connection );
        }
    }

    @Override
    public List<Utilisateur> list() throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet rs = null;
        List<Utilisateur> utilisateurs = new ArrayList<Utilisateur>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_SELECT, false );

            rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
                utilisateurs.add( map( rs ) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( rs, preparedStatement, connection );
        }

        return utilisateurs;
    }

    @Override
    public void update( Utilisateur utilisateur, String email ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_UPDATE, false,
                    utilisateur.getNom(),
                    utilisateur.getPrenom(), utilisateur.getAge(), utilisateur.getTelephone(), email );

            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la mise a jour du profil." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } catch ( Exception e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    private static Utilisateur map( ResultSet rs ) throws SQLException {
        Utilisateur utilisateur = new Utilisateur();

        utilisateur.setEmail( rs.getString( "email" ) );
        utilisateur.setNom( rs.getString( "nom" ) );
        utilisateur.setPrenom( rs.getString( "prenom" ) );
        utilisateur.setMotDePasse( rs.getString( "motDePasse" ) );
        utilisateur.setAge( rs.getInt( "age" ) );
        utilisateur.setTelephone( rs.getString( "telephone" ) );
        utilisateur.setDateInscription( new DateTime( rs.getTimestamp( "dateInscription" ) ) );
        utilisateur.setAdmin( rs.getBoolean( "isAdmin" ) );

        return utilisateur;
    }
}
