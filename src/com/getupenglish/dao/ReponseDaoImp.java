package com.getupenglish.dao;

import static com.getupenglish.dao.DAOUtility.close;
import static com.getupenglish.dao.DAOUtility.initPreparedQuery;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.getupenglish.beans.Reponse;

public class ReponseDaoImp implements ReponseDao {
    private static final String SQL_SELECT = "SELECT idReponse, idCours, reponse FROM Reponse";
    private static final String SQL_INSERT = "INSERT INTO Reponse (idCours, reponse) VALUES ( ?, ?)";
    private static final String SQL_DELETE = "DELETE FROM Reponse WHERE idCours = ?";

    private DAOFactory          daoFactory;

    public ReponseDaoImp( DAOFactory daoFactory ) {
        this.daoFactory = daoFactory;
    }

    @Override
    public void create( Reponse reponse ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValue = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_INSERT, true,
                    reponse.getCours().getId(), reponse.getReponse() );
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la création de la réponse, aucune ligne ajoutée dans la table." );
            }

            autoGeneratedValue = preparedStatement.getGeneratedKeys();
            if ( autoGeneratedValue.next() ) {
                reponse.setId( autoGeneratedValue.getLong( 1 ) );
            } else {
                throw new DAOException( "Échec de la création de la réponse en base, aucun ID auto-généré retourné." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } catch ( Exception e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    @Override
    public List<Reponse> list( CoursDao coursDao ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet rs = null;
        List<Reponse> reponses = new ArrayList<Reponse>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_SELECT, false );

            rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
                reponses.add( map( rs, coursDao ) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( rs, preparedStatement, connection );
        }

        return reponses;
    }

    @Override
    public void delete( Long idCours ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_DELETE, false, idCours );

            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la suppression de la réponse, aucune ligne supprimée de la table." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    private static Reponse map( ResultSet rs, CoursDao coursDao ) throws SQLException {
        Reponse reponse = new Reponse();

        reponse.setId( rs.getLong( "idReponse" ) );
        reponse.setCours( coursDao.read( rs.getLong( "idCours" ) ) );
        reponse.setReponse( rs.getString( "reponse" ) );

        return reponse;
    }
}
