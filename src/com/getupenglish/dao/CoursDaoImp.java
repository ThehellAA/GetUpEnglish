package com.getupenglish.dao;

import static com.getupenglish.dao.DAOUtility.close;
import static com.getupenglish.dao.DAOUtility.initPreparedQuery;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;

import com.getupenglish.beans.Cours;

public class CoursDaoImp implements CoursDao {
    private static final String SQL_SELECT    = "SELECT idCours, categorie, titre, contenu, difficulte, date FROM Cours";
    private static final String SQL_INSERT    = "INSERT INTO Cours ( categorie, titre, contenu, difficulte, date) VALUES (?, ?, ?, ?, ?)";
    private static final String SQL_DELETE    = "DELETE FROM Cours WHERE idCours = ?";
    private static final String SQL_SELECT_ID = "SELECT idCours, categorie, titre, contenu, difficulte, date FROM Cours WHERE idCours = ?";
    private static final String SQL_UPDATE    = "UPDATE Cours SET categorie = ?, titre = ?, contenu = ?, difficulte = ? WHERE idCours = ?";

    private DAOFactory          daoFactory;

    CoursDaoImp( DAOFactory daoFactory ) {
        this.daoFactory = daoFactory;
    }

    @Override
    public void create( Cours cours ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValue = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_INSERT, true, cours.getCategorie(),
                    cours.getTitre(), cours.getContenu(), cours.getDifficulte(),
                    new Timestamp( cours.getDate().getMillis() ) );
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la création du cours, aucune ligne ajoutée dans la table." );
            }

            autoGeneratedValue = preparedStatement.getGeneratedKeys();
            if ( autoGeneratedValue.next() ) {
                cours.setId( autoGeneratedValue.getLong( 1 ) );
            } else {
                throw new DAOException( "Échec de la création du cours en base, aucun ID auto-généré retourné." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( autoGeneratedValue, preparedStatement, connection );
        }
    }

    @Override
    public void update( Cours cours ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_UPDATE, false, cours.getCategorie(),
                    cours.getTitre(), cours.getContenu(), cours.getDifficulte(), cours.getId() );
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la mise a jour du cours, aucune ligne modifier." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } catch ( Exception e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    @Override
    public Cours read( Long id ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet rs = null;
        Cours cours = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_SELECT_ID, false, id );

            rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
                cours = map( rs );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( rs, preparedStatement, connection );
        }

        return cours;
    }

    @Override
    public void delete( Long id ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_DELETE, false, id );

            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la suppression du cours, aucune ligne supprimée de la table." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e.getMessage() );
        } finally {
            close( preparedStatement, connection );
        }
    }

    @Override
    public List<Cours> list() throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet rs = null;
        List<Cours> cours = new ArrayList<Cours>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_SELECT, false );

            rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
                cours.add( map( rs ) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( rs, preparedStatement, connection );
        }

        return cours;
    }

    private static Cours map( ResultSet rs ) throws SQLException {
        Cours cours = new Cours();

        cours.setId( rs.getLong( "idCours" ) );
        cours.setCategorie( rs.getString( "categorie" ) );
        cours.setTitre( rs.getString( "titre" ) );
        cours.setContenu( rs.getString( "contenu" ) );
        cours.setDifficulte( rs.getInt( "difficulte" ) );
        cours.setDate( new DateTime( rs.getTimestamp( "date" ) ) );

        return cours;
    }
}
