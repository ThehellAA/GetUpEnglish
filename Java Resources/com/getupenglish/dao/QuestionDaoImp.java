package com.getupenglish.dao;

import static com.getupenglish.dao.DAOUtility.close;
import static com.getupenglish.dao.DAOUtility.initPreparedQuery;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.getupenglish.beans.Question;

public class QuestionDaoImp implements QuestionDao {
    private static final String SQL_SELECT          = "SELECT idQuestion, idCours, question, reponse, image FROM Question";
    private static final String SQL_INSERT          = "INSERT INTO Question (idCours, question, reponse, image) VALUES ( ?, ?, ?, ?)";
    private static final String SQL_DELETE          = "DELETE FROM Question WHERE idQuestion = ?";
    private static final String SQL_DELETE_ID_COURS = "DELETE FROM Question WHERE idCours = ?";

    private DAOFactory          daoFactory;

    public QuestionDaoImp( DAOFactory daoFactory ) {
        this.daoFactory = daoFactory;
    }

    @Override
    public void create( Question question ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValue = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = initPreparedQuery( connection, SQL_INSERT, true, question.getCours().getId(),
                    question.getQuestion(), question.getReponse(), question.getImage() );
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la création de la question, aucune ligne ajoutée dans la table." );
            }

            autoGeneratedValue = preparedStatement.getGeneratedKeys();
            if ( autoGeneratedValue.next() ) {
                question.setId( autoGeneratedValue.getLong( 1 ) );
            } else {
                throw new DAOException( "Échec de la création de la question en base, aucun ID auto-généré retourné." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } catch ( Exception e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    @Override
    public List<Question> list( CoursDao coursDao ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet rs = null;
        List<Question> questions = new ArrayList<Question>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_SELECT, false );

            rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
                questions.add( map( rs, coursDao ) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( rs, preparedStatement, connection );
        }

        return questions;
    }

    @Override
    public void delete( Long id ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_DELETE, false, id );

            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la suppression de la question, aucune ligne supprimée de la table." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    @Override
    public void deleteToutQuestion( Long idCours ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedQuery( connection, SQL_DELETE_ID_COURS, false, idCours );

            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Échec de la suppression des questions, aucune ligne supprimée de la table." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            close( preparedStatement, connection );
        }
    }

    private static Question map( ResultSet rs, CoursDao coursDao ) throws SQLException {
        Question question = new Question();

        question.setId( rs.getLong( "idQuestion" ) );
        question.setCours( coursDao.read( rs.getLong( "idCours" ) ) );
        question.setQuestion( rs.getString( "question" ) );
        question.setReponse( rs.getString( "reponse" ) );
        question.setImage( rs.getString( "image" ) );

        return question;
    }
}
